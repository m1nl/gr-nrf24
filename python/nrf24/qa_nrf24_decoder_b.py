#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2024 m1nl.
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
import os

import pmt
from gnuradio import blocks, gr, gr_unittest
from gnuradio.nrf24 import nrf24_decoder_b


class nrf24_pdu_handler(gr.basic_block):
    def __init__(self):
        gr.basic_block.__init__(self, name="pdu_handler", in_sig=[], out_sig=[])
        self.pdu_port_name = "pdu"
        self.message_port_register_in(pmt.intern(self.pdu_port_name))
        self.set_msg_handler(pmt.intern(self.pdu_port_name), self.handle_pdu)

    def handle_pdu(self, pdu):
        metadata = pmt.car(pdu)
        data = pmt.cdr(pdu)

        if address := pmt.dict_ref(metadata, pmt.intern("address"), None):
            print(pmt.to_python(address))

        if payload := pmt.dict_ref(metadata, pmt.intern("payload"), None):
            print(pmt.to_python(payload))


class qa_nrf24_decoder_b(gr_unittest.TestCase):
    def setUp(self):
        self.tb = gr.top_block()

    def tearDown(self):
        self.tb = None

    def test_instance(self):
        instance = nrf24_decoder_b()

    def test_001_descriptive_test_name(self):
        src_data = list(
            map(
                int,

            )
        )

        src = blocks.vector_source_b(src_data)
        decoder = nrf24_decoder_b()
        pdu_handler = nrf24_pdu_handler()

        self.tb.connect(src, decoder)
        self.tb.msg_connect(decoder, pmt.intern("pdu"), pdu_handler, pmt.intern("pdu"))

        self.tb.run()


if __name__ == "__main__":
    gr_unittest.run(qa_nrf24_decoder_b)
